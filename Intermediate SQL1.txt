-- Step 1: Creating the Database Tables

-- Creating the Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,       -- Unique identifier for each customer
    CustomerName VARCHAR(100),        -- Customer's name
    Country VARCHAR(50)               -- Country where the customer resides
);

-- Creating the Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,          -- Unique identifier for each order
    CustomerID INT,                   -- Foreign key from Customers table
    OrderDate DATE,                   -- Date of the order
    TotalAmount DECIMAL(10, 2),       -- Total amount for the order
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) -- Enforce foreign key relationship
);

-- Step 2: Insert Data into the Tables 

-- Inserting Data into Customers Table
INSERT INTO Customers (CustomerID, CustomerName, Country) VALUES 
(1, 'Alice', 'USA'),
(2, 'Bob', 'UK'),
(3, 'Charlie', 'USA'),
(4, 'Diana', 'Canada'),
(5, 'Eve', 'Australia');

-- Inserting Data into Orders Table
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(101, 1, '2024-01-15', 120.50),
(102, 1, '2024-02-10', 80.00),
(103, 2, '2024-01-20', 200.00),
(104, 3, '2024-03-12', 150.00),
(105, 4, '2024-02-05', 60.00),
(106, 5, '2024-03-30', 90.00);


-- Part 2: Writing SQL Queries

-- Problem 1: Customer Orders with Conditional Logic
/*
Write a query that returns the CustomerName, Country, TotalAmount, and a new column named OrderCategory. 
Use a CASE statement to categorize orders as follows:
"High" if TotalAmount is greater than 150.
"Medium" if TotalAmount is between (inclusive) 100 and 150.
"Low" if TotalAmount is less than 100.
*/
SELECT 
    c.CustomerName,
    c.Country,
    ROUND(o.TotalAmount, 0) AS TotalAmount, -- Rounding TotalAmount to the nearest whole number
    CASE
        WHEN ROUND(o.TotalAmount, 0) > 150 THEN 'High'
        WHEN ROUND(o.TotalAmount, 0) BETWEEN 100 AND 150 THEN 'Medium'
        ELSE 'Low'
    END AS OrderCategory
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID;



-- Problem 2: Grouping and Aggregation by Country 
/*
Use GROUP BY and HAVING to return each Country and the total number of orders placed by customers in that country,
but only include countries that have placed more than one order.
*/
SELECT 
    c.Country,
    COUNT(o.OrderID) AS TotalOrders
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.Country
HAVING COUNT(o.OrderID) > 1;


-- Problem 3: Combining Tables with Joins 
/*
Write a query that returns the CustomerName, OrderID, and TotalAmount for all customers, including those who haven’t placed an order.
Use an Outer Join to ensure all customers are listed.
*/
-- Adding a new customer who hasn't placed an order yet
INSERT INTO Customers (CustomerID, CustomerName, Country) 
VALUES (6, 'Jasper', 'Spain');


SELECT 
    c.CustomerName , -- Alias for CustomerName
    o.OrderID,
    ROUND(o.TotalAmount, 0) AS TotalAmount -- Rounding TotalAmount to the nearest whole number
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID;



-- Problem 4: Subqueries 
/*
Write a query that returns the CustomerName and TotalAmount for customers whose total order amount exceeds the average
order amount across all customers. Use a subquery to calculate the average.
*/
SELECT AVG(CEIL(TotalAmount)) AS AvgTotalAmount
FROM Orders;


SELECT 
    c.CustomerName,
    CEIL(o.TotalAmount) AS RoundedTotalAmount
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE CEIL(o.TotalAmount) > (
    -- Subquery to calculate the average order amount across all orders
    SELECT AVG(TotalAmount) FROM Orders
);




-- Problem 5: Using a CTE for Average Order Amount 
/*
Write a query using a CTE that calculates the average order amount per customer and then selects the customers 
who have an average order amount above their country’s average.
*/
-- Step 1: Calculate average order amount per customer
WITH CustomerAverage AS (
    SELECT 
        c.CustomerID,
        c.CustomerName,
        CEILING(AVG(o.TotalAmount)) AS AverageOrderAmount  -- Calculate and round up average order amount for each customer
    FROM Customers c
    LEFT JOIN Orders o ON c.CustomerID = o.CustomerID  -- Include customers without orders
    GROUP BY c.CustomerID, c.CustomerName  -- Group by CustomerID and CustomerName
),

-- Step 2: Calculate average order amount per country
CountryAverage AS (
    SELECT 
        c.Country,
        CEILING(AVG(o.TotalAmount)) AS CountryAvgOrderAmount  -- Calculate and round up average for each country
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID  -- Join to ensure we only consider customers with orders
    GROUP BY c.Country  -- Group by Country
)

-- Step 3: Select customers with average order amount above their country's average
SELECT 
    ca.CustomerID,
    ca.CustomerName,
    ca.AverageOrderAmount,
    ca2.CountryAvgOrderAmount  -- Include country's average for reference
FROM CustomerAverage ca
JOIN Customers c ON ca.CustomerID = c.CustomerID  -- Join to get country information
JOIN CountryAverage ca2 ON c.Country = ca2.Country  -- Join to get the country's average
WHERE ca.AverageOrderAmount > ca2.CountryAvgOrderAmount;  -- Filter customers based on the condition