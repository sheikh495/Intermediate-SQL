-- INIT database
-- Step 1: Creating the Database Tables
-- Problem 1:Create the Database Tables
-- 1. Customers Table:
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    Country VARCHAR(50)
);
-- 2. Orders Table:
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
-- Problem 2: Insert Data into the TablesALTER
-- 1. Inserting Data into Customers Table:

INSERT INTO Customers (CustomerID, CustomerName, Country) VALUES 
(1, 'Alice', 'USA'),
(2, 'Bob', 'UK'),
(3, 'Charlie', 'USA'),
(4, 'Diana', 'Canada'),
(5, 'Eve', 'Australia');

-- 2. Inserting Data into Orders Table:

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(101, 1, '2024-01-15', 120.50),
(102, 1, '2024-02-10', 80.00),
(103, 2, '2024-01-20', 200.00),
(104, 3, '2024-03-12', 150.00),
(105, 4, '2024-02-05', 60.00),
(106, 5, '2024-03-30', 90.00);

-- Part 2: Writing SQL Queries
-- Problem 1: Customer Orders with Conditional Logic

SELECT 
    c.CustomerName, 
    c.Country, 
    o.TotalAmount,
    CASE 
        WHEN o.TotalAmount > 150 THEN 'High'
        WHEN o.TotalAmount BETWEEN 100 AND 150 THEN 'Medium'
        ELSE 'Low'
    END AS OrderCategory
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID;

-- Problem 2: Grouping and Aggregation by Country

SELECT 
    c.Country, 
    COUNT(o.OrderID) AS TotalOrders
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.Country
HAVING COUNT(o.OrderID) > 1;

-- Problem 3: Combining Tables with Joins

SELECT 
    c.CustomerName, 
    o.OrderID, 
    o.TotalAmount
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID;

Problem 4: Subqueries
SELECT 
    c.CustomerName, 
    o.TotalAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE o.TotalAmount > (SELECT AVG(TotalAmount) FROM Orders);

Problem 5: Using a CTE for Average Order Amount

WITH CustomerAverage AS (
    SELECT 
        c.Country, 
        AVG(o.TotalAmount) AS CountryAverage
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    GROUP BY c.Country
)
SELECT 
    c.CustomerName, 
    o.TotalAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN CustomerAverage ca ON c.Country = ca.Country
WHERE o.TotalAmount > ca.CountryAverage;


 